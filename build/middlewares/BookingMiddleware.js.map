{"version":3,"sources":["../../src/middlewares/BookingMiddleware.js"],"names":["db","Model","BookingMiddleware","req","res","next","body","user_id","trip_id","message","seat_number","query","rows","length","data","is_admin","booking_id","params"],"mappings":";;;;;;;AACA;;AACA;;;;;;;;;;;;;;AAEA,IAAMA,EAAE,GAAG,IAAIC,iBAAJ,EAAX;;IAEqBC,iB;;;;;;;;;;;;+CACOC,G,EAAKC,G,EAAKC,I;;;;;;;;4BAEHF,GAAG,CAACG,I,EAAzBC,O,aAAAA,O,EAASC,O,aAAAA,O;;sBAEb,CAACD,OAAD,IAAY,CAACC,O;;;;;iDACR,8BAAYJ,GAAZ,EAAiB,yBAAjB,EAA4C,GAA5C,C;;;iDAGFC,IAAI,E;;;;;iDAEJ,8BAAYD,GAAZ,EAAiB,YAAIK,OAArB,EAA8B,GAA9B,C;;;;;;;;;;;;;;;;;;;;;gDAIqBN,G,EAAKC,G,EAAKC,I;;;;;;;;6BAELF,GAAG,CAACG,I,EAA7BI,W,cAAAA,W,EAAaF,O,cAAAA,O;;qBAEjBE,W;;;;;;uBACqBV,EAAE,CAACW,KAAH,CAAS,gEAAT,EAA2E,CAACD,WAAD,EAAcF,OAAd,CAA3E,C;;;;AAAfI,gBAAAA,I,QAAAA,I;;sBAEJA,IAAI,CAACC,MAAL,GAAc,C;;;;;kDACT,8BAAYT,GAAZ,EAAiB,4BAAjB,EAA+C,GAA/C,C;;;kDAGFC,IAAI,E;;;kDAGNA,IAAI,E;;;;;kDAEJ,8BAAYD,GAAZ,EAAiB,aAAIK,OAArB,EAA8B,GAA9B,C;;;;;;;;;;;;;;;;;;;;;gDAIuBN,G,EAAKC,G,EAAKC,I;;;;;;;;6BAEXF,GAAG,CAACG,I,EAAzBE,O,cAAAA,O,EAASD,O,cAAAA,O;;uBAEMP,EAAE,CAACW,KAAH,CAAS,4DAAT,EAAuE,CAACH,OAAD,EAAUD,OAAV,CAAvE,C;;;;AAAfK,gBAAAA,I,SAAAA,I;;sBAEJA,IAAI,CAACC,MAAL,GAAc,C;;;;;kDACT,8BAAYT,GAAZ,EAAiB,mCAAjB,EAAsD,GAAtD,C;;;kDAGFC,IAAI,E;;;;;kDAEJ,8BAAYD,GAAZ,EAAiB,aAAIK,OAArB,EAA8B,GAA9B,C;;;;;;;;;;;;;;;;;;;;;gDAIqBN,G,EAAKC,G,EAAKC,I;;;;;;;;AAE9BE,gBAAAA,O,GAAYJ,GAAG,CAACG,I,CAAhBC,O;;oBAEHA,O;;;;;kDACI,8BAAYH,GAAZ,EAAiB,uBAAjB,EAA0C,GAA1C,C;;;;uBAGcJ,EAAE,CAACW,KAAH,CAAS,mCAAT,EAA8C,CAACJ,OAAD,CAA9C,C;;;;AAAfK,gBAAAA,I,SAAAA,I;AAERT,gBAAAA,GAAG,CAACW,IAAJ,GAAW;AACTC,kBAAAA,QAAQ,EAAEH,IAAI,CAAC,CAAD,CAAJ,CAAQG;AADT,iBAAX;kDAIOV,IAAI,E;;;;;kDAEJ,8BAAYD,GAAZ,EAAiB,aAAIK,OAArB,EAA8B,GAA9B,C;;;;;;;;;;;;;;;;;;;;;gDAIwBN,G,EAAKC,G,EAAKC,I;;;;;;;;AAEjCE,gBAAAA,O,GAAYJ,GAAG,CAACG,I,CAAhBC,O;AACAS,gBAAAA,U,GAAeb,GAAG,CAACc,M,CAAnBD,U;;uBAEehB,EAAE,CAACW,KAAH,CAAS,uDAAT,EAAkE,CAACJ,OAAD,EAAUS,UAAV,CAAlE,C;;;;AAAfJ,gBAAAA,I,SAAAA,I;;sBAEJA,IAAI,CAACC,MAAL,GAAc,C;;;;;kDACT,8BAAYT,GAAZ,EAAiB,mBAAjB,EAAsC,GAAtC,C;;;kDAGFC,IAAI,E;;;;;kDAEJ,8BAAYD,GAAZ,EAAiB,aAAIK,OAArB,EAA8B,GAA9B,C","sourcesContent":["/* eslint-disable camelcase */\nimport Model from '../models/Model';\nimport returnError from '../helpers/errorHandler';\n\nconst db = new Model();\n\nexport default class BookingMiddleware {\n  static async validateData(req, res, next) {\n    try {\n      const { user_id, trip_id } = req.body;\n\n      if (!user_id || !trip_id) {\n        return returnError(res, 'Incomplete booking data', 401);\n      }\n\n      return next();\n    } catch (err) {\n      return returnError(res, err.message, 500);\n    }\n  }\n\n  static async checkIfSeatIsTaken(req, res, next) {\n    try {\n      const { seat_number, trip_id } = req.body;\n\n      if (seat_number) {\n        const { rows } = await db.query('SELECT * FROM bookings WHERE seat_number = $1 AND trip_id = $2', [seat_number, trip_id]);\n\n        if (rows.length > 0) {\n          return returnError(res, 'This seat is already taken', 401);\n        }\n\n        return next();\n      }\n\n      return next();\n    } catch (err) {\n      return returnError(res, err.message, 500);\n    }\n  }\n\n  static async checkIfUserHasBooked(req, res, next) {\n    try {\n      const { trip_id, user_id } = req.body;\n\n      const { rows } = await db.query('SELECT * FROM bookings WHERE trip_id = $1 AND user_id = $2', [trip_id, user_id]);\n\n      if (rows.length > 0) {\n        return returnError(res, 'You have already booked this trip', 401);\n      }\n\n      return next();\n    } catch (err) {\n      return returnError(res, err.message, 500);\n    }\n  }\n\n  static async checkIfUserIsAdmin(req, res, next) {\n    try {\n      const { user_id } = req.body;\n\n      if (!user_id) {\n        return returnError(res, 'User ID not specified', 404);\n      }\n\n      const { rows } = await db.query('SELECT * FROM users WHERE id = $1', [user_id]);\n\n      req.data = {\n        is_admin: rows[0].is_admin,\n      };\n\n      return next();\n    } catch (err) {\n      return returnError(res, err.message, 500);\n    }\n  }\n\n  static async checkIfUserHasBooking(req, res, next) {\n    try {\n      const { user_id } = req.body;\n      const { booking_id } = req.params;\n\n      const { rows } = await db.query('SELECT * FROM bookings WHERE user_id = $1 AND id = $2', [user_id, booking_id]);\n\n      if (rows.length < 1) {\n        return returnError(res, 'Booking not found', 404);\n      }\n\n      return next();\n    } catch (err) {\n      return returnError(res, err.message, 500);\n    }\n  }\n}\n"],"file":"BookingMiddleware.js"}