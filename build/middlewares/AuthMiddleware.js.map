{"version":3,"sources":["../../src/middlewares/AuthMiddleware.js"],"names":["dotenv","config","JWT_SECRET","process","env","db","Model","AuthMiddleware","req","res","next","jwt","sign","check","expiresIn","token","data","message","headers","verify","err","decoded","user_id","body","query","rows","length","is_admin"],"mappings":";;;;;;;AAEA;;AACA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;AAEAA,mBAAOC,MAAP;;IACQC,U,GAAeC,OAAO,CAACC,G,CAAvBF,U;AACR,IAAMG,EAAE,GAAG,IAAIC,iBAAJ,EAAX;;IAEqBC,c;;;;;;;;;;;;+CACQC,G,EAAKC,G,EAAKC,I;;;;;;;;uBAEbC,yBAAIC,IAAJ,CAAS;AAAEC,kBAAAA,KAAK,EAAE;AAAT,iBAAT,EAA0BX,UAA1B,EAAsC;AACxDY,kBAAAA,SAAS,EAAE;AAD6C,iBAAtC,C;;;AAAdC,gBAAAA,K;AAINP,gBAAAA,GAAG,CAACQ,IAAJ,qBAAgBR,GAAG,CAACQ,IAApB;AAA0BD,kBAAAA,KAAK,EAALA;AAA1B;iDAEOL,IAAI,E;;;;;iDAEJ,8BAAYD,GAAZ,EAAiB,YAAIQ,OAArB,EAA8B,GAA9B,C;;;;;;;;;;;;;;;;;;;;;gDAIgBT,G,EAAKC,G,EAAKC,I;;;;;;;AAE3BK,gBAAAA,K,GAAQP,GAAG,CAACU,OAAJ,CAAY,cAAZ,C;;qBAEVH,K;;;;;;uBACIJ,yBAAIQ,MAAJ,CAAWJ,KAAX,EAAkBb,UAAlB,EAA8B,UAACkB,GAAD,EAAMC,OAAN,EAAkB;AACpD,sBAAID,GAAG,IAAI,CAACC,OAAR,IAAmB,CAACA,OAAO,CAACR,KAAhC,EAAuC,OAAO,8BAAYJ,GAAZ,EAAiB,eAAjB,EAAkC,GAAlC,CAAP;AAEvC,yBAAOC,IAAI,EAAX;AACD,iBAJK,C;;;;;;;kDAKM,8BAAYD,GAAZ,EAAiB,iBAAjB,EAAoC,GAApC,C;;;;;;;;;kDAEP,8BAAYA,GAAZ,EAAiB,aAAIQ,OAArB,EAA8B,GAA9B,C;;;;;;;;;;;;;;;;;;;;;gDAIqBT,G,EAAKC,G,EAAKC,I;;;;;;;;AAE9BY,gBAAAA,O,GAAYd,GAAG,CAACe,I,CAAhBD,O;;uBAEejB,EAAE,CAACmB,KAAH,CAAS,mCAAT,EAA8C,CAACF,OAAD,CAA9C,C;;;;AAAfG,gBAAAA,I,QAAAA,I;;sBAEJA,IAAI,CAACC,MAAL,GAAc,CAAd,IAAmB,CAACD,IAAI,CAAC,CAAD,CAAJ,CAAQE,Q;;;;;kDACvB,8BAAYlB,GAAZ,EAAiB,eAAjB,EAAkC,GAAlC,C;;;kDAGFC,IAAI,E;;;;;kDAEJ,8BAAYD,GAAZ,EAAiB,aAAIQ,OAArB,EAA8B,GAA9B,C","sourcesContent":["/* eslint-disable camelcase */\n/* eslint-disable consistent-return */\nimport jwt from 'jsonwebtoken';\nimport dotenv from 'dotenv';\n\nimport returnError from '../helpers/errorHandler';\nimport Model from '../models/Model';\n\ndotenv.config();\nconst { JWT_SECRET } = process.env;\nconst db = new Model();\n\nexport default class AuthMiddleware {\n  static async generateToken(req, res, next) {\n    try {\n      const token = await jwt.sign({ check: true }, JWT_SECRET, {\n        expiresIn: 43200,\n      });\n\n      req.data = { ...req.data, token };\n\n      return next();\n    } catch (err) {\n      return returnError(res, err.message, 500);\n    }\n  }\n\n  static async validateToken(req, res, next) {\n    try {\n      const token = req.headers['access-token'];\n\n      if (token) {\n        await jwt.verify(token, JWT_SECRET, (err, decoded) => {\n          if (err || !decoded || !decoded.check) return returnError(res, 'Invalid Token', 401);\n\n          return next();\n        });\n      } else return returnError(res, 'Token Not Found', 401);\n    } catch (err) {\n      return returnError(res, err.message, 500);\n    }\n  }\n\n  static async checkIfUserIsAdmin(req, res, next) {\n    try {\n      const { user_id } = req.body;\n\n      const { rows } = await db.query('SELECT * FROM users WHERE id = $1', [user_id]);\n\n      if (rows.length < 1 || !rows[0].is_admin) {\n        return returnError(res, 'Access Denied', 401);\n      }\n\n      return next();\n    } catch (err) {\n      return returnError(res, err.message, 500);\n    }\n  }\n}\n"],"file":"AuthMiddleware.js"}