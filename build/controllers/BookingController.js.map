{"version":3,"sources":["../../src/controllers/BookingController.js"],"names":["db","Model","BookingController","req","res","body","user_id","trip_id","seat_number","query","rows","status","json","data","message","is_admin","values","booking_id","params"],"mappings":";;;;;;;AACA;;AACA;;;;;;;;;;;;;;;;;;AAEA,IAAMA,EAAE,GAAG,IAAIC,iBAAJ,EAAX;;IAEqBC,iB;;;;;;;;;;;;+CACKC,G,EAAKC,G;;;;;;;;4BAIrBD,GAAG,CAACE,I,EADNC,O,aAAAA,O,EAASC,O,aAAAA,O,EAASC,W,aAAAA,W;;uBAGGR,EAAE,CAACS,KAAH,CAAS,sFAAT,EAAiG,CAACH,OAAD,EAAUC,OAAV,EAAmBC,WAAnB,CAAjG,C;;;;AAAfE,gBAAAA,I,QAAAA,I;iDAEDN,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,kBAAAA,IAAI,oBAAOH,IAAI,CAAC,CAAD,CAAX,CADsB;AAE1BC,kBAAAA,MAAM,EAAE;AAFkB,iBAArB,C;;;;;iDAKA,8BAAYP,GAAZ,EAAiB,YAAIU,OAArB,EAA8B,GAA9B,C;;;;;;;;;;;;;;;;;;;;;gDAIcX,G,EAAKC,G;;;;;;;;AAElBE,gBAAAA,O,GAAYH,GAAG,CAACE,I,CAAhBC,O;AACAS,gBAAAA,Q,GAAaZ,GAAG,CAACU,I,CAAjBE,Q;AACJN,gBAAAA,K,GAAQ,E;AACRO,gBAAAA,M,GAAS,E;AAEb,oBAAID,QAAJ,EAAcN,KAAK,GAAG,4GAAR,CAAd,KACK;AACHO,kBAAAA,MAAM,GAAG,CAACV,OAAD,CAAT;AACAG,kBAAAA,KAAK,GAAG,+HAAR;AACD;;uBAEsBT,EAAE,CAACS,KAAH,CAASA,KAAT,EAAgBO,MAAhB,C;;;;AAAfN,gBAAAA,I,SAAAA,I;kDAEDN,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,kBAAAA,IAAI,EAAEH,IADoB;AAE1BC,kBAAAA,MAAM,EAAE;AAFkB,iBAArB,C;;;;;kDAKA,8BAAYP,GAAZ,EAAiB,aAAIU,OAArB,EAA8B,GAA9B,C;;;;;;;;;;;;;;;;;;;;;gDAIgBX,G,EAAKC,G;;;;;;;;AAEpBa,gBAAAA,U,GAAed,GAAG,CAACe,M,CAAnBD,U;;uBAEejB,EAAE,CAACS,KAAH,CAAS,oCAAT,EAA+C,CAACQ,UAAD,CAA/C,C;;;;AAAfP,gBAAAA,I,SAAAA,I;kDAEDN,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,kBAAAA,IAAI;AACFC,oBAAAA,OAAO,EAAE;AADP,qBAECJ,IAAI,CAAC,CAAD,CAFL,CADsB;AAK1BC,kBAAAA,MAAM,EAAE;AALkB,iBAArB,C;;;;;kDAQA,8BAAYP,GAAZ,EAAiB,aAAIU,OAArB,EAA8B,GAA9B,C","sourcesContent":["/* eslint-disable camelcase */\nimport Model from '../models/Model';\nimport returnError from '../helpers/errorHandler';\n\nconst db = new Model();\n\nexport default class BookingController {\n  static async addBooking(req, res) {\n    try {\n      const {\n        user_id, trip_id, seat_number,\n      } = req.body;\n\n      const { rows } = await db.query('INSERT INTO bookings (user_id, trip_id, seat_number) VALUES ($1, $2, $3) RETURNING *', [user_id, trip_id, seat_number]);\n\n      return res.status(200).json({\n        data: { ...rows[0] },\n        status: 'success',\n      });\n    } catch (err) {\n      return returnError(res, err.message, 500);\n    }\n  }\n\n  static async getBookings(req, res) {\n    try {\n      const { user_id } = req.body;\n      const { is_admin } = req.data;\n      let query = '';\n      let values = [];\n\n      if (is_admin) query = 'SELECT * FROM bookings JOIN trips ON trips.id = bookings.trip_id JOIN users ON bookings.user_id = users.id';\n      else {\n        values = [user_id];\n        query = 'SELECT * FROM bookings JOIN trips ON trips.id = bookings.trip_id JOIN users ON bookings.user_id = users.id WHERE user_id = $1';\n      }\n\n      const { rows } = await db.query(query, values);\n\n      return res.status(200).json({\n        data: rows,\n        status: 'success',\n      });\n    } catch (err) {\n      return returnError(res, err.message, 500);\n    }\n  }\n\n  static async deleteBooking(req, res) {\n    try {\n      const { booking_id } = req.params;\n\n      const { rows } = await db.query('DELETE FROM bookings WHERE id = $1', [booking_id]);\n\n      return res.status(200).json({\n        data: {\n          message: 'Booking deleted successfully',\n          ...rows[0],\n        },\n        status: 'success',\n      });\n    } catch (err) {\n      return returnError(res, err.message, 500);\n    }\n  }\n}\n"],"file":"BookingController.js"}