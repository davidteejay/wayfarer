{"version":3,"sources":["../../src/controllers/TripController.js"],"names":["db","Model","TripController","req","res","body","user_id","bus_id","origin","destination","trip_date","fare","query","rows","status","json","data","message","trip_id","params","values"],"mappings":";;;;;;;AACA;;AACA;;;;;;;;;;;;;;;;;;AAEA,IAAMA,EAAE,GAAG,IAAIC,iBAAJ,EAAX;;IAEqBC,c;;;;;;;;;;;;+CACEC,G,EAAKC,G;;;;;;;;4BAIlBD,GAAG,CAACE,I,EADNC,O,aAAAA,O,EAASC,M,aAAAA,M,EAAQC,M,aAAAA,M,EAAQC,W,aAAAA,W,EAAaC,S,aAAAA,S,EAAWC,I,aAAAA,I;;uBAG5BX,EAAE,CAACY,KAAH,CAAS,0HAAT,EAAqI,CAACL,MAAD,EAASC,MAAT,EAAiBC,WAAjB,EAA8BC,SAA9B,EAAyCC,IAAzC,EAA+CL,OAA/C,CAArI,C;;;;AAAfO,gBAAAA,I,QAAAA,I;iDAEDT,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,kBAAAA,IAAI,oBAAOH,IAAI,CAAC,CAAD,CAAX,CADsB;AAE1BC,kBAAAA,MAAM,EAAE;AAFkB,iBAArB,C;;;;;iDAKA,8BAAYV,GAAZ,EAAiB,YAAIa,OAArB,EAA8B,GAA9B,C;;;;;;;;;;;;;;;;;;;;;gDAIad,G,EAAKC,G;;;;;;;;AAEjBc,gBAAAA,O,GAAYf,GAAG,CAACgB,M,CAAhBD,O;;uBAEelB,EAAE,CAACY,KAAH,CAAS,iEAAT,EAA4E,CAACM,OAAD,CAA5E,C;;;;AAAfL,gBAAAA,I,SAAAA,I;kDAEDT,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,kBAAAA,IAAI;AACFC,oBAAAA,OAAO,EAAE;AADP,qBAECJ,IAAI,CAAC,CAAD,CAFL,CADsB;AAK1BC,kBAAAA,MAAM,EAAE;AALkB,iBAArB,C;;;;;kDAQA,8BAAYV,GAAZ,EAAiB,aAAIa,OAArB,EAA8B,GAA9B,C;;;;;;;;;;;;;;;;;;;;;gDAIWd,G,EAAKC,G;;;;;;;;6BAESD,GAAG,CAACS,K,EAA5BJ,M,cAAAA,M,EAAQC,W,cAAAA,W;AACZG,gBAAAA,K,GAAQ,wN;AACRQ,gBAAAA,M,GAAS,E;;AAEb,oBAAIZ,MAAJ,EAAY;AACVI,kBAAAA,KAAK,GAAG,6OAAR;AACAQ,kBAAAA,MAAM,GAAG,YAAKZ,MAAL,EAAT;AACD,iBAHD,MAGO,IAAIC,WAAJ,EAAiB;AACtBG,kBAAAA,KAAK,GAAG,kPAAR;AACAQ,kBAAAA,MAAM,GAAG,YAAKX,WAAL,EAAT;AACD;;;uBACsBT,EAAE,CAACY,KAAH,CAASA,KAAT,EAAgBQ,MAAhB,C;;;;AAAfP,gBAAAA,I,SAAAA,I;kDACDT,GAAG,CAACU,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,kBAAAA,IAAI,EAAEH,IADoB;AAE1BC,kBAAAA,MAAM,EAAE;AAFkB,iBAArB,C;;;;;kDAKA,8BAAYV,GAAZ,EAAiB,aAAIa,OAArB,EAA8B,GAA9B,C","sourcesContent":["/* eslint-disable camelcase */\nimport Model from '../models/Model';\nimport returnError from '../helpers/errorHandler';\n\nconst db = new Model();\n\nexport default class TripController {\n  static async addTrip(req, res) {\n    try {\n      const {\n        user_id, bus_id, origin, destination, trip_date, fare,\n      } = req.body;\n\n      const { rows } = await db.query('INSERT INTO trips (bus_id, origin, destination, trip_date, fare, created_by) VALUES ($1, $2, $3, $4, $5, $6) RETURNING *', [bus_id, origin, destination, trip_date, fare, user_id]);\n\n      return res.status(200).json({\n        data: { ...rows[0] },\n        status: 'success',\n      });\n    } catch (err) {\n      return returnError(res, err.message, 500);\n    }\n  }\n\n  static async cancelTrip(req, res) {\n    try {\n      const { trip_id } = req.params;\n\n      const { rows } = await db.query(\"UPDATE trips SET status = 'cancelled' WHERE id = $1 RETURNING *\", [trip_id]);\n\n      return res.status(200).json({\n        data: {\n          message: 'Trip cancelled successfully',\n          ...rows[0],\n        },\n        status: 'success',\n      });\n    } catch (err) {\n      return returnError(res, err.message, 500);\n    }\n  }\n\n  static async getTrips(req, res) {\n    try {\n      const { origin, destination } = req.query;\n      let query = 'SELECT origin, destination, trip_date, fare, status, number_plate as bus_plate_number, manufacturer AS bus_manufacturer, model AS bus_model, capacity AS bus_capacity FROM trips JOIN buses ON trips.bus_id = buses.id';\n      let values = [];\n\n      if (origin) {\n        query = 'SELECT origin, destination, trip_date, fare, status, number_plate as bus_plate_number, manufacturer AS bus_manufacturer, model AS bus_model, capacity AS bus_capacity FROM trips JOIN buses ON trips.bus_id = buses.id WHERE origin LIKE $1';\n        values = [`%${origin}`];\n      } else if (destination) {\n        query = 'SELECT origin, destination, trip_date, fare, status, number_plate as bus_plate_number, manufacturer AS bus_manufacturer, model AS bus_model, capacity AS bus_capacity FROM trips JOIN buses ON trips.bus_id = buses.id WHERE destination LIKE $1';\n        values = [`%${destination}`];\n      }\n      const { rows } = await db.query(query, values);\n      return res.status(200).json({\n        data: rows,\n        status: 'success',\n      });\n    } catch (err) {\n      return returnError(res, err.message, 500);\n    }\n  }\n}\n"],"file":"TripController.js"}